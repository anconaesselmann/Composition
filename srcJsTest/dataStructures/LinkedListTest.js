var DummyObject = function(item) {
    this.value = item;
}

describe('Linked List', function () {
    it('peeking at an empty list', function () {
        var ll = new LinkedList();
        expect(ll.peek()).toBe(null);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.peekNext()).toBe(null);
        expect(ll.remove()).toBe(null);
        expect(ll.pop()).toBe(null);
    });
    it('appending and popping one item', function () {
        var ll = new LinkedList();
        var item = new DummyObject('a');
        ll.append(item);
        expect(ll.pop()).toBe(item);
    });
    it('prepending and popping one item', function () {
        var ll = new LinkedList();
        var item = new DummyObject('a');
        ll.prepend(item);
        expect(ll.pop()).toBe(item);
    });
    it('appending one item and popping two', function () {
        var ll = new LinkedList();
        var item = new DummyObject('a');
        ll.append(item);
        expect(ll.pop()).toBe(item);
        expect(ll.pop()).toBe(null);
    });
    it('preppending one item and popping two', function () {
        var ll = new LinkedList();
        var item = new DummyObject('a');
        ll.prepend(item);
        expect(ll.pop()).toBe(item);
        expect(ll.pop()).toBe(null);
    });
    it('appending and popping two items', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        ll.append(itemA);
        ll.append(itemB);
        expect(ll.pop()).toBe(itemB);
        expect(ll.pop()).toBe(itemA);
    });
    it('prepending and popping two items', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        ll.prepend(itemA);
        ll.prepend(itemB);
        expect(ll.pop()).toBe(itemA);
        expect(ll.pop()).toBe(itemB);
    });
    it('appending and peeking with two items', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        ll.append(itemA);
        expect(ll.peek()).toBe(itemA);
        ll.append(itemB);
        expect(ll.peek()).toBe(itemB);
    });
    it('appending items and itterating through them', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        expect(ll.hasNext()).toBe(false);
        ll.reset();
        expect(ll.hasNext()).toBe(true);
        expect(ll.peek()).toBe(itemA);
        expect(ll.peekNext()).toBe(itemB);
        expect(ll.hasNext()).toBe(true);
        expect(ll.next()).toBe(itemA);
        expect(ll.peek()).toBe(itemB);
        expect(ll.peekNext()).toBe(itemC);
        expect(ll.hasNext()).toBe(true);


        expect(ll.next()).toBe(itemB);
        expect(ll.peek()).toBe(itemC);
        expect(ll.peekNext()).toBe(itemD);
        expect(ll.hasNext()).toBe(true);

        expect(ll.next()).toBe(itemC);
        expect(ll.peek()).toBe(itemD);
        expect(ll.peekNext()).toBe(itemE);
        expect(ll.hasNext()).toBe(true);

        expect(ll.next()).toBe(itemD);
        expect(ll.peek()).toBe(itemE);
        expect(ll.peekNext()).toBe(itemF);
        expect(ll.hasNext()).toBe(true);

        expect(ll.next()).toBe(itemE);
        expect(ll.peek()).toBe(itemF);
        expect(ll.peekNext()).toBe(null);
        expect(ll.hasNext()).toBe(false);

        expect(ll.next()).toBe(itemF);
        expect(ll.peek()).toBe(null);
        expect(ll.peekNext()).toBe(null);
        expect(ll.hasNext()).toBe(false);
    });
    it('iterating past tail and returning', function () {
        var ll = new LinkedList();
        var tail = new DummyObject('a');
        var head = new DummyObject('b');
        ll.prepend(tail);
        ll.prepend(head);
        expect(ll.eof()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.hasNext()).toBe(true);
        expect(ll.next()).toBe(head);
        expect(ll.next()).toBe(tail);
        expect(ll.peek()).toBe(null);
        expect(ll.eof()).toBe(true);
        expect(ll.hasPrev()).toBe(true);
        expect(ll.hasNext()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.prev()).toBe(null);
        expect(ll.peekTail()).toBe(tail);
        expect(ll.peek()).toBe(tail);
        expect(ll.prev()).toBe(tail);
        expect(ll.eof()).toBe(false);
    });
    it('iterating past head and returning', function () {
        var ll = new LinkedList();
        var tail = new DummyObject('a');
        var head = new DummyObject('b');
        ll.prepend(tail);
        ll.prepend(head);
        ll.resetEnd();
        expect(ll.eof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.hasPrev()).toBe(true);
        expect(ll.prev()).toBe(tail);
        expect(ll.prev()).toBe(head);
        expect(ll.peek()).toBe(null);
        expect(ll.bof()).toBe(true);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.hasNext()).toBe(true);
        expect(ll.eof()).toBe(false);
        expect(ll.next()).toBe(null);
        expect(ll.peekHead()).toBe(head);
        expect(ll.peek()).toBe(head);
        expect(ll.next()).toBe(head);
        expect(ll.bof()).toBe(false);
    });
    it('prepending items and itterating through them', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.prepend(itemA);
        ll.prepend(itemB);
        ll.prepend(itemC);
        ll.prepend(itemD);
        ll.prepend(itemE);
        ll.prepend(itemF);
        expect(ll.eof()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.hasNext()).toBe(true);
        expect(ll.next()).toBe(itemF);
        expect(ll.next()).toBe(itemE);
        expect(ll.next()).toBe(itemD);
        expect(ll.next()).toBe(itemC);
        expect(ll.next()).toBe(itemB);
        expect(ll.next()).toBe(itemA);
        expect(ll.peek()).toBe(null);
        expect(ll.hasNext()).toBe(false);
        expect(ll.eof()).toBe(true);
        expect(ll.hasPrev()).toBe(true);
    });
    it('appending items and itterating through them in reverse', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        expect(ll.peek()).toBe(itemF);
        expect(ll.peekPrev()).toBe(itemE);
        expect(ll.hasNext()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.prev()).toBe(itemF);
        expect(ll.peekPrev()).toBe(itemD);
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.prev()).toBe(itemE);
        expect(ll.peekPrev()).toBe(itemC);
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.prev()).toBe(itemD);
        expect(ll.peekPrev()).toBe(itemB);
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.prev()).toBe(itemC);
        expect(ll.peekPrev()).toBe(itemA);
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.prev()).toBe(itemB);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.prev()).toBe(itemA);
        expect(ll.peek()).toBe(null);
        expect(ll.bof()).toBe(true);
        expect(ll.hasNext()).toBe(true);
        expect(ll.hasPrev()).toBe(false);
    });
    it('prepending items and itterating through them in reverse', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.prepend(itemA);
        ll.prepend(itemB);
        ll.prepend(itemC);
        ll.prepend(itemD);
        ll.prepend(itemE);
        ll.prepend(itemF);
        ll.resetEnd();
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.peek()).toBe(itemA);
        expect(ll.prev()).toBe(itemA);
        expect(ll.prev()).toBe(itemB);
        expect(ll.prev()).toBe(itemC);
        expect(ll.prev()).toBe(itemD);
        expect(ll.peekPrev()).toBe(itemF);
        expect(ll.prev()).toBe(itemE);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.prev()).toBe(itemF);
        expect(ll.bof()).toBe(true);
        expect(ll.peek()).toBe(null);
        expect(ll.hasNext()).toBe(true);
        expect(ll.hasPrev()).toBe(false);
    });
    it('removing from front', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        ll.reset();
        expect(ll.bof()).toBe(false);
        expect(ll.remove()).toBe(itemA);
        expect(ll.peek()).toBe(itemB);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.bof()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.remove()).toBe(itemB);
        expect(ll.peek()).toBe(itemC);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.bof()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.remove()).toBe(itemC);
        expect(ll.peek()).toBe(itemD);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.bof()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.remove()).toBe(itemD);
        expect(ll.peek()).toBe(itemE);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.bof()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.eof()).toBe(false);
        expect(ll.remove()).toBe(itemE);
        expect(ll.peek()).toBe(itemF);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.bof()).toBe(false);
        expect(ll.eof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.remove()).toBe(itemF);
        expect(ll.peek()).toBe(null);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.bof()).toBe(true);
        expect(ll.eof()).toBe(true);
        expect(ll.peekHead()).toBe(null);
        expect(ll.peekTail()).toBe(null);
    });
    it('removing from end', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        expect(ll.eof()).toBe(false);
        expect(ll.remove()).toBe(itemF);
        expect(ll.peek()).toBe(itemE);
        expect(ll.peekNext()).toBe(null);
        expect(ll.eof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.remove()).toBe(itemE);
        expect(ll.peek()).toBe(itemD);
        expect(ll.peekNext()).toBe(null);
        expect(ll.eof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.remove()).toBe(itemD);
        expect(ll.peek()).toBe(itemC);
        expect(ll.peekNext()).toBe(null);
        expect(ll.eof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.remove()).toBe(itemC);
        expect(ll.peek()).toBe(itemB);
        expect(ll.peekNext()).toBe(null);
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.hasPrev()).toBe(true);
        expect(ll.remove()).toBe(itemB);
        expect(ll.peek()).toBe(itemA);
        expect(ll.peekNext()).toBe(null);
        expect(ll.eof()).toBe(false);
        expect(ll.bof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.hasPrev()).toBe(false);
        expect(ll.remove()).toBe(itemA);
        expect(ll.peek()).toBe(null);
        expect(ll.peekNext()).toBe(null);
        expect(ll.bof()).toBe(true);
        expect(ll.eof()).toBe(true);
    });
    it('removing from middle', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        ll.prev();
        ll.prev();
        expect(ll.remove()).toBe(itemD);
        expect(ll.peek()).toBe(itemC);
        expect(ll.peekPrev()).toBe(itemB);
        expect(ll.peekNext()).toBe(itemE);
        expect(ll.remove()).toBe(itemC);
        expect(ll.peek()).toBe(itemB);
        expect(ll.peekPrev()).toBe(itemA);
        expect(ll.peekNext()).toBe(itemE);
        expect(ll.remove()).toBe(itemB);
        expect(ll.peek()).toBe(itemA);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.peekNext()).toBe(itemE);
        expect(ll.remove()).toBe(itemA);
        expect(ll.peek()).toBe(itemE);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.peekNext()).toBe(itemF);
        expect(ll.remove()).toBe(itemE);
        expect(ll.peek()).toBe(itemF);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.peekNext()).toBe(null);
    });
    it('inserting after current in middle and end', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        ll.prev();
        ll.prev();
        expect(ll.peek()).toBe(itemD);
        var itemNew = new DummyObject('!');
        ll.insertAfter(itemNew);
        expect(ll.peek()).toBe(itemNew);
        expect(ll.peekPrev()).toBe(itemD);
        expect(ll.peekNext()).toBe(itemE);
        ll.next();
        expect(ll.peekPrev()).toBe(itemNew);
        ll.prev();
        ll.prev();
        expect(ll.peekNext()).toBe(itemNew);
        ll.resetEnd();
        expect(ll.peek()).toBe(itemF);
        var itemNew2 = new DummyObject('?');
        ll.insertAfter(itemNew2);
        expect(ll.peekPrev()).toBe(itemF);
        expect(ll.peekNext()).toBe(null);
        expect(ll.eof()).toBe(false);
        expect(ll.hasNext()).toBe(false);
        expect(ll.hasPrev()).toBe(true);
        ll.prev();
        expect(ll.peekNext()).toBe(itemNew2);
    });
    it('inserting before current in middle and beginning', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        ll.prev();
        ll.prev();
        expect(ll.peek()).toBe(itemD);
        var itemNew = new DummyObject('!');
        ll.insertBefore(itemNew);
        expect(ll.peek()).toBe(itemNew);
        expect(ll.peekPrev()).toBe(itemC);
        expect(ll.peekNext()).toBe(itemD);
        ll.next();
        expect(ll.peekPrev()).toBe(itemNew);
        ll.prev();
        ll.prev();
        expect(ll.peekNext()).toBe(itemNew);
        ll.reset();
        expect(ll.peek()).toBe(itemA);
        var itemNew2 = new DummyObject('?');
        ll.insertBefore(itemNew2);
        expect(ll.peekPrev()).toBe(null);
        expect(ll.peekNext()).toBe(itemA);
        expect(ll.bof()).toBe(false);
        expect(ll.hasNext()).toBe(true);
        expect(ll.hasPrev()).toBe(false);
        ll.next();
        expect(ll.peekPrev()).toBe(itemNew2);
    });
    it('confirming that an element is in the list', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemE);
        ll.append(itemF);
        expect(ll.hasItem(itemA)).toBe(true);
        expect(ll.hasItem(itemB)).toBe(true);
        expect(ll.hasItem(itemC)).toBe(true);
        expect(ll.hasItem(itemD)).toBe(false);
        expect(ll.hasItem(itemE)).toBe(true);
        expect(ll.hasItem(itemF)).toBe(true);
    });
    it('popping and peeking', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.reset();
        expect(ll.pop()).toBe(itemE);
        expect(ll.peek()).toBe(itemD);
    });
    it('length testing', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        var itemG = new DummyObject('g');
        var itemH = new DummyObject('h');
        expect(ll.length).toBe(0);
        ll.pop();
        expect(ll.length).toBe(0);
        ll.remove();
        expect(ll.length).toBe(0);
        ll.append(itemA);
        expect(ll.length).toBe(1);
        ll.append(itemB);
        expect(ll.length).toBe(2);
        ll.append(itemC);
        var pp = ll.getPositionPointer();
        expect(ll.length).toBe(3);
        ll.append(itemD);
        expect(ll.length).toBe(4);
        ll.append(itemE);
        expect(ll.length).toBe(5);
        expect(ll.pop()).toBe(itemE);
        expect(ll.length).toBe(4);
        ll.setPositionPointer(pp);
        ll.remove();
        expect(ll.length).toBe(3);
        ll.insertBefore(itemF);
        expect(ll.length).toBe(4);
        ll.insertAfter(itemG);
        expect(ll.length).toBe(5);
        ll.prepend(itemH)
        expect(ll.length).toBe(6);
    });
    it('get sub array', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        var itemG = new DummyObject('g');
        var itemH = new DummyObject('h');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        ll.append(itemG);
        ll.append(itemH);
        expect(ll.length).toBe(8);
        var subArray = ll.getSubArray(itemC, itemG);
        expect(subArray.length).toBe(5);
        var subArray = ll.getSubArray(itemH, itemF);
        expect(subArray.length).toBe(3);
        var subArray = ll.getSubArray(itemH, itemH);
        expect(subArray.length).toBe(1);
        ll.pop();
        var subArray = ll.getSubArray(itemF, itemH);
        expect(subArray.length).toBe(0);
    });
    it('remove range inclusive', function () {
        var ll = new LinkedList();
        var itemA = new DummyObject('a');
        var itemB = new DummyObject('b');
        var itemC = new DummyObject('c');
        var itemD = new DummyObject('d');
        var itemE = new DummyObject('e');
        var itemF = new DummyObject('f');
        var itemG = new DummyObject('g');
        var itemH = new DummyObject('h');
        ll.append(itemA);
        ll.append(itemB);
        ll.append(itemC);
        ll.append(itemD);
        ll.append(itemE);
        ll.append(itemF);
        ll.append(itemG);
        ll.append(itemH);
        expect(ll.length).toBe(8);
        var subArray = ll.removeRangeInclusive(itemG, itemC);
        expect(subArray.length).toBe(5);
        expect(ll.length).toBe(3);
        expect(subArray[0]).toBe(itemC);
        expect(subArray[1]).toBe(itemD);
        expect(subArray[2]).toBe(itemE);
        expect(subArray[3]).toBe(itemF);
        expect(subArray[4]).toBe(itemG);

        subArray = ll.getSubArray(itemA, itemH);
        expect(subArray.length).toBe(3);
        expect(subArray[0]).toBe(itemA);
        expect(subArray[1]).toBe(itemB);
        expect(subArray[2]).toBe(itemH);
        ll.reset();
        expect(ll.next()).toBe(itemA);
        expect(ll.next()).toBe(itemB);
        expect(ll.next()).toBe(itemH);
    });
});
